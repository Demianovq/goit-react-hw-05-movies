{"version":3,"file":"static/js/847.d36accd0.chunk.js","mappings":"4OAKaA,EAAU,WACrB,OAA+BC,EAAAA,EAAAA,UAAS,IAAxC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA6BF,EAAAA,EAAAA,WAAS,GAAtC,eAAOG,EAAP,KAAeC,EAAf,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAaR,OAXAE,EAAAA,EAAAA,YAAU,WACRH,GAAW,GACNC,IACLG,EAAAA,EAAAA,IAAkBH,GACfI,MAAK,SAAAC,GACJR,EAAYQ,EAASC,SACrBP,GAAW,EACZ,IACAQ,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GACf,GAAE,CAACR,KAGF,gCACGF,IAAU,SAAC,IAAD,IACVF,EAAQe,OAAS,GAChB,wBACGf,EAAQgB,KAAI,SAAAC,GACX,OACE,2BACE,qCAAaA,EAAOC,WACpB,oCAAYD,EAAOE,aAFZF,EAAOG,GAKnB,OAGH,yCAIP,EAED,W,+LCzCAC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBF,EAAAA,EAAAA,IAAA,qCAAwCC,IAD1D,cACCb,EADD,yBAGEA,EAASe,MAHX,kEAMA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8BrB,GAA9B,uFACkBiB,EAAAA,EAAAA,IAAA,gBACZjB,EADY,oBACOkB,EADP,oBADlB,cACCb,EADD,yBAKEA,EAASe,MALX,kEAQA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA8BtB,GAA9B,uFACkBiB,EAAAA,EAAAA,IAAA,gBACZjB,EADY,4BACekB,EADf,oBADlB,cACCb,EADD,yBAKEA,EAASe,MALX,kEAQA,SAAejB,EAAtB,+CAAO,OAAP,oBAAO,WAAiCH,GAAjC,uFACkBiB,EAAAA,EAAAA,IAAA,gBACZjB,EADY,4BACekB,EADf,oBADlB,cACCb,EADD,yBAKEA,EAASe,MALX,kEAQA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,uFACkBP,EAAAA,EAAAA,IAAA,+BACGC,EADH,iCACmCM,EADnC,gCADlB,cACCnB,EADD,yBAKEA,EAASe,MALX,kE","sources":["components/reviews/reviews.jsx","services/fetchMovieApi.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from 'components/loader/loader';\nimport { fetchMovieReviews } from 'services/fetchMovieApi';\n\nexport const Reviews = () => {\n  const [reviews, setAReviews] = useState([]);\n  const [loader, setALoader] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setALoader(true);\n    if (!movieId) return;\n    fetchMovieReviews(movieId)\n      .then(response => {\n        setAReviews(response.results);\n        setALoader(false);\n      })\n      .catch(error => console.log(error));\n  }, [movieId]);\n\n  return (\n    <>\n      {loader && <Loader />}\n      {reviews.length > 0 ? (\n        <ul>\n          {reviews.map(review => {\n            return (\n              <li key={review.id}>\n                <h3>Author: {review.author}</h3>\n                <p>Review: {review.content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <h3>No reviews</h3>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '71c93644ec2284a1c063a4cc462c4087';\n\nexport async function fetchTrends() {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n\n  return response.data;\n}\n\nexport async function fetchMovieById(movieId) {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response.data;\n}\n\nexport async function fetchMovieCast(movieId) {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response.data;\n}\n\nexport async function fetchMovieReviews(movieId) {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response.data;\n}\n\nexport async function fetchMovieByQuery(query) {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n\n  return response.data;\n}\n"],"names":["Reviews","useState","reviews","setAReviews","loader","setALoader","movieId","useParams","useEffect","fetchMovieReviews","then","response","results","catch","error","console","log","length","map","review","author","content","id","axios","API_KEY","fetchTrends","data","fetchMovieById","fetchMovieCast","fetchMovieByQuery","query"],"sourceRoot":""}